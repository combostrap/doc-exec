# Bug in idea, you need to download and map the schema to the below file
# curl https://jreleaser.org/schema/jreleaser-schema-1.17.0.json -o target/jreleaser-schema-1.17.0.json
# $schema: https://jreleaser.org/schema/jreleaser-schema-1.17.0.json

environment:
  properties:
    # The jars are copied via maven with the release profile in the deps directory
    depsPrefix: 'deps'
    maintainer: 'nico@combostrap.com'

# https://jreleaser.org/guide/latest/reference/project.html
project:
  name: doc-exec
  #version: '{{projectVersion}}'
  description: ComboStrap Doc Exec
  longDescription: |
    Doc Exec, execution of code inside documentation
  authors:
    - Combostrap Team
  inceptionYear: '2025'
  copyright: '2025 Combostrap.com'
  license: Functional Source License, Version 1.1, MIT Future License
  vendor: 'combostrap' # used in package identifier in winget so lowercase
  snapshot:
    pattern: .*-SNAPSHOT
    # This is the default version value (used in bash script to get the final assembly name)
    label: early-access
  tags:
    - documentation
    - execution
    - markdown
    - wiki
  links:
    homepage: https://github.com/ComboStrap/doc-exec
    documentation: https://github.com/ComboStrap/doc-exec
    bugTracker: https://github.com/ComboStrap/doc-exec/issues
    # LicenseURL (Mandatory for winget)
    license: https://spdx.org/licenses/FSL-1.1-MIT.html
  languages:
    java:
      groupId: com.combostrap
      artifactId: combostrap-doc-exec
      mainClass: com.combostrap.docExec.DocExecutorCli
  stereotype: CLI

# Create a GitHub release
# https://jreleaser.org/guide/latest/reference/release/github.html
release:
  github:
    owner: combostrap # in docker, repository name must be lowercase
    name: doc-exec
    overwrite: true # Overwrite will delete the release
    # We create the tag
    skipTag: true
    # When this is a draft, it wonâ€™t be seen by the public unless itâ€™s published.
    draft: false
    # Release by default
    releaseName: "Release {{projectEffectiveVersion}}"
    prerelease:
      # # A regex to determine if the project version is a prerelease
      pattern: .*-rc.*
    # https://jreleaser.org/guide/latest/reference/release/changelog.html
    changelog:
      formatted: ALWAYS
      format: '- {{commitShortHash}} {{commitTitle}}'
      preset: 'conventional-commits'
      contributors:
        enabled: false
      content: |
        # Changelog Version {{projectEffectiveVersion}}

        {{changelogChanges}}
      labelers:
        - label: 'feature'
          title: 'Resolves #'
          body: 'Resolves #'
        - label: 'issue'
          title: 'Fixes #'
          body: 'Fixes #'
        - label: 'issue'
          title: 'Relates to #'
          body: 'Relates to #'
        - label: 'task'
          title: '[chore]'
      categories:
        - title: 'ðŸš€ Features'
          key: 'features'
          labels:
            - 'feature'
        - title: 'âœ… Issues'
          key: 'issues'
          labels:
            - 'issue'
        - title: 'ðŸ§° Tasks'
          key: 'tasks'
          labels:
            - 'task'
      replacers:
        - search: '\[chore\] '

platform:
  replacements:
    # used by GitHub and does not suck
    aarch_64: arm64
    x86_64: x64
    osx: macos

# Assemble create artifacts that can be distributed
# Distribution uses them to define the set of artifacts in the release
assemble:
  # Execute it with `jreleaser assemble --assembler javaArchive`
  javaArchive:
    doc-exec-nojre:
      active: ALWAYS
      exported: false # we define the distribution in the distribution section
      # Name: ie combostrap-doc-exec-1.0.0-nojre.zip or tar
      archiveName: '{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-nojre'
      # Common practice is to provide both .zip and .tar.gz
      formats:
        - ZIP
        - TAR_GZ
      mainJar:
        path: '{{baseOutputDirectory}}/{{projectJavaArtifactId}}-{{projectVersion}}.jar'
      jars:
        # The dependency jars are copied via maven with the deps profile
        - pattern: '{{Env.DEPENDENCY_OUTPUT_DIRECTORY}}/*.jar'
      swid:
        tagRef: swid-tag
  # Execute it with `jreleaser assemble --assembler jlink`
  # https://jreleaser.org/guide/latest/reference/assemble/jlink.html
  jlink:
    # The assembly Name is used in the name of the distribution (distributionName)
    # Example: doc-exec-jre-early-access-linux-x86_64.zip
    doc-exec-jre:
      active: ALWAYS
      imageName: '{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre'
      executable: 'doc-exec' # no template can be used here
      exported: false # True is mandatory as the artifacts are used by jpackage. Even if we defined our own artifacts in the distribution (runtimeImages are missing)
      jdeps:
        multiRelease: '11'
        ignoreMissingDeps: true
        # If wildcard is true, we get an error in windows
        # the command:
        # jdeps.exe --multi-release 11 --ignore-missing-deps --print-module-deps --class-path universal\*;windows-x86_64\* target\combostrap-doc-exec-1.0.0.jar
        # returns
        # Exception in thread "main" java.nio.file.InvalidPathException: Illegal char <*> at index 10: universal\*
        useWildcardInPath: false
        targets:
          - '{{baseOutputDirectory}}/{{projectJavaArtifactId}}-{{projectVersion}}.jar'
      additionalModuleNames:
        # jdk.crypto.ec is mandatory to avoid handshake_failure on http request
        # https://stackoverflow.com/questions/55439599/sslhandshakeexception-with-jlink-created-runtime
        - 'jdk.crypto.ec'
        # Exception in thread "main" java.lang.NoClassDefFoundError: java/awt/Color
        - 'java.desktop'
        # To compile java code
        - 'jdk.compiler'
        # When compiling, Error: No file system provider is available to handle this file: /opt/doc-exec/jars/lanterna-3.1.3.jar
        - 'jdk.zipfs'
      targetJdks:
        - path: '{{Env.JDK_DOWNLOAD_DIRECTORY}}/linux-x64/jdk-{{Env.JDK_VERSION}}'
          platform: 'linux-x86_64'
        - path: '{{Env.JDK_DOWNLOAD_DIRECTORY}}/linux-arm64/jdk-{{Env.JDK_VERSION}}'
          platform: 'linux-aarch_64'
        # Alpine (musl is used for docker image only)
        - path: '{{Env.JDK_DOWNLOAD_DIRECTORY}}/linux-musl-x64/jdk-{{Env.JDK_VERSION}}'
          platform: 'linux-musl-x86_64'
        # Windows does not have any arm64 version
        - path: '{{Env.JDK_DOWNLOAD_DIRECTORY}}/windows-x64/jdk-{{Env.JDK_VERSION}}'
          platform: 'windows-x86_64'
        - path: '{{Env.JDK_DOWNLOAD_DIRECTORY}}/macos-x64/jdk-{{Env.JDK_VERSION}}/Contents/Home'
          platform: 'osx-x86_64'
        - path: '{{Env.JDK_DOWNLOAD_DIRECTORY}}/macos-arm64/jdk-{{Env.JDK_VERSION}}/Contents/Home'
          platform: 'osx-aarch_64'
      mainJar:
        path: '{{baseOutputDirectory}}/{{projectJavaArtifactId}}-{{projectVersion}}.jar'
      jars:
        # The dependency jars are copied via maven with the release profile in the deps directory
        - pattern: '{{baseOutputDirectory}}/{{depsPrefix}}/*.jar'
      swid:
        tagRef: swid-tag
  # https://jreleaser.org/guide/latest/reference/assemble/jpackage.html#_jlink_jpackage
  # https://github.com/jreleaser/jreleaser/blob/6979e56816f3293720868ef3f90e55a6eb51d8d8/jreleaser.yml#L225
  jpackage:
    doc-exec-installer:
      # jPackage tool create only native installers for the platform it's running on
      # https://github.com/jreleaser/jreleaser/blob/main/.github/workflows/step-jpackage.yml
      active: RELEASE
      exported: true # we define the artifacts in the distribution manually
      applicationPackage:
        appName: '{{projectName}}' # Name of the cli
      # jlink: doc-exec-jre # jlink disabled, we could find how to solve the `runtimeImages are missing` even if jlink was exported
      runtimeImages:
        - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-jre/jlink/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.zip'
          platform: 'windows-x86_64'
      linux:
        types: [ rpm, deb ]
        maintainer: '{{maintainer}}'
        icon: 'src/main/media/combostrap-icon-256x256.png'
      osx:
        types: [ pkg ]
        appName: doc-exec # go in the name of the package: doc-exec-1.0.0-osx-aarch_64.pkg
        packageName: doc-exec
        packageIdentifier: com.combostrap.doc-exec
        resourceDir: 'src/main/jpackage/osx'
      # Windows:
      # Create the MSI on Windows Powershell:
      #     jreleaser assemble --debug --select-current-platform --assembler=jpackage
      # Check your MSI
      #     msiexec /i target\jreleaser\assemble\doc-exec-installer\jpackage\doc-exec-1.0.0-windows-x86_64.msi /l*v target/msi-logfile.txt
      # Delete
      #     msiexec /x target\jreleaser\assemble\doc-exec-installer\jpackage\doc-exec-1.0.0-windows-x86_64.msi /l*v target/msi-uninstall-logfile.txt
      windows:
        types: [ msi ]
        console: true # this is a console app
        dirChooser: true # The wizard will open
        resourceDir: "src/main/jpackage/windows-resource-dir"
        icon: "src/main/media/combostrap.ico"
        perUserInstall: true # Why? No space by default in the path, `C:\Users\user\AppData\Local\doc-exec\`


# Distributions defines the uploaded artifacts in the release
# It defines artifacts that may be published using supported packages and announced with supported announcers.
# https://jreleaser.org/guide/latest/reference/distributions.html
distributions:
  # Java Archive Distributions (ie JAVA_BINARY)
  doc-exec-nojre:
    type: JAVA_BINARY # ie java archive
    artifacts:
      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-nojre/java-archive/{{projectJavaArtifactId}}-{{projectVersion}}-nojre.zip'
      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-nojre/java-archive/{{projectJavaArtifactId}}-{{projectVersion}}-nojre.tar.gz'
  # Java Archive Distributions
  doc-exec-jre:
    # Take the default value from the `assemble` node
    # See with:
    # jreleaser config --quiet  | grep -A 40 '^distributions' | yq
    # grep because the output is not accepted by yq
    type: JLINK
    artifacts:
      # used by brew
      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-jre/jlink/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.zip'
        platform: 'linux-x86_64'
      # used by brew
      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-jre/jlink/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.zip'
        platform: 'linux-aarch_64'
      # used by docker
      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-jre/jlink/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.zip'
        platform: 'linux_musl-aarch_64'
      # used by brew
      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-jre/jlink/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.zip'
        platform: 'osx-x86_64'
      # used by brew
      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-jre/jlink/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.zip'
        platform: 'osx-aarch_64'
      # used by chocolatey
      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-jre/jlink/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.zip'
        platform: 'windows-x86_64'
    # Run it with
    # jreleaser prepare --debug -p=brew
    brew:
      active: ALWAYS
      multiPlatform: true
      formulaName: 'doc-exec'
    # Run it with
    # jreleaser prepare --debug -p=chocolatey
    chocolatey:
      active: ALWAYS
      continueOnError: true
      remoteBuild: true
      title: 'Doc Execution'
      iconUrl: 'https://rawcdn.githack.com/ComboStrap/site-com-combostrap/fcae9343885f4b6e4e8f977a05cb7353e84c3c8c/data/media/android-chrome-192x192.png'
      packageName: 'doc-exec' # no template (name of the package, ie name of the application)
      repository:
        active: RELEASE
    # Run ti with
    # jreleaser assemble --debug --assembler=jlink --select-platform=linux_musl-x86_64
    # jreleaser prepare --debug -p=docker
    # jreleaser publish --debug -p=docker
    docker:
      active: ALWAYS
      useLocalArtifact: true
      repository: # Wild ! This repository will contain the Dockerfile and the distribution
        active: NEVER
      labels:
        org.opencontainers.image.source: "https://{{repoHost}}/{{repoOwner}}/{{repoName}}"
      registries:
        - serverName: ghcr.io
      specs:
        doc-exec-alpine:
          matchers:
            platform: 'linux_musl-x86_64'
          imageNames:
            - "ghcr.io/combostrap/{{dockerSpecName}}:{{tagName}}"
            - "ghcr.io/combostrap/{{dockerSpecName}}:latest"
          preCommands:
            - 'RUN apk add unzip binutils fakeroot rpm bash git'
          postCommands:
            - 'VOLUME /workspace' # working directory
  # Installer distributions
  doc-exec-installer:
    type: NATIVE_PACKAGE
    executable:
      name: "doc-exec" # used in the winget manifest, not a template
    # To test winget:
    # * on WSL, upload the artifacts generate the manifests:
    #    jreleaser release
    #    jreleaser prepare --debug -p=winget
    # * on Windows, validate and install them
    #    winget validate --manifest \\wsl.localhost\xxx\doc-exec\target\jreleaser\prepare\doc-exec-installer\winget\manifests\c\combostrap\doc-exec\1.0.0
    #    winget install --manifest \\wsl.localhost\xxx\doc-exec\target\jreleaser\prepare\doc-exec-installer\winget\manifests\c\combostrap\doc-exec\1.0.0
    winget:
      active: RELEASE
      continueOnError: true
      package:
        name: doc-exec
      installer:
        scope: USER # Why? No space by default in the path, `C:\Users\user\AppData\Local\doc-exec\`
      repository:
        active: ALWAYS
        name: winget-manifests
        commitMessage: 'Doc Exec {{tagName}}'
    artifacts:
      # used by winget
      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-installer/jpackage/{{projectName}}-{{projectVersionNumber}}-{{artifactPlatform}}.msi'
        transform: '{{distributionName}}/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.msi'
        platform: 'windows-x86_64'
# deb and rpm are not supported for now as we need to create our own repo for distribution with apt or yum:
# * installation on linux desktop is with brew,
# * installation on a linux server is manual with a jlink distribution
#      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-installer/jpackage/{{projectName}}_{{projectVersionNumber}}-1_amd64.deb'
#        transform: '{{distributionName}}/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.deb'
#        platform: 'linux-x86_64'
#      - path: '{{baseOutputDirectory}}/jreleaser/assemble/doc-exec-installer/jpackage/{{projectName}}-{{projectVersionNumber}}-1.x86_64.rpm'
#        transform: '{{distributionName}}/{{projectJavaArtifactId}}-{{projectEffectiveVersion}}-jre-{{artifactPlatform}}.rpm'
#        platform: 'linux-x86_64'

# Create a software BOM (works only for non-snapshot)
catalog:
  active: ALWAYS
  sbom:
    active: ALWAYS
    syft:
      active: ALWAYS

# Create signatures files for the distributions files and the checksum files
# https://jreleaser.org/guide/latest/reference/signing.html
signing:
  active: ALWAYS
  mode: COMMAND # command mode so that it's easy to run it locally
  command:
    keyName: 1C43E1FE21F4DF4F

