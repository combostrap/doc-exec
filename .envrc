#!/usr/bin/env bash
# Shebang to just allow refactoring by the ide

# Function to check if an environment variable is set
check_env_var() {
    local var_name="$1"
    local var_value="$2"

    if [ -z "$var_value" ]; then
        echo "ERROR: $var_name environment variable is not set"
        echo "  Please set it in your shell profile, ~/.bashrc, ~/.zshrc, or ~/.config/direnv/direnvrc, or ~/.envrc.local"
        return 1
    fi
    return 0
}

# Date from java util takes into account the default timezone
# https://learn.microsoft.com/en-us/java/openjdk/timezones#setting-the-tz-environment-variable
export TZ=UTC

# Project Name, Organisation Name (used in scripts)
export PROJECT_NAME="doc-exec"
export PROJECT_ORGANISATION_NAME="combostrap"
export PROJECT_ROOT="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# SDKMAN
# loading, as it's as the sdk command is a bash function
export SDKMAN_DIR=${SDKMAN_DIR:-"$HOME/.sdkman"}
SDKMAN_INIT_FILE="${SDKMAN_DIR}/bin/sdkman-init.sh"
if [[ ! -s "$SDKMAN_INIT_FILE" ]]; then
  echo "sdkman init file was not found and is mandatory (Path: $SDKMAN_INIT_FILE)"
  echo "You can"
  echo "  * install sdkman"
  echo "  * or overwrite the <.sdkman> dir by setting the SDKMAN_DIR env"
  return 1
fi
# We disable `set -o nounset` to avoid unbound variable errors
set +u
# shellcheck disable=SC1090
source "${SDKMAN_INIT_FILE}"


# Java Temurin
# Compilation based on https://github.com/openjdk/jdk16u
export JDK_VERSION
JDK_VERSION=$(yq --exit-status '.project.properties."jdk.version"' pom.xml | cut -c 1-7)
export JRELEASER_PROJECT_LANGUAGES_JAVA_VERSION=${JDK_VERSION}
export JDK_DISTRIBUTION
JDK_DISTRIBUTION=$(yq --exit-status '.project.properties."jdk.distribution"' pom.xml | cut -c 1-3)
SDKMAN_JDK_VERSION="${JDK_VERSION}-${JDK_DISTRIBUTION}"
if ! sdk home java "${SDKMAN_JDK_VERSION}" >/dev/null; then
  sdk install java "${SDKMAN_JDK_VERSION}"
fi
sdk use java "${SDKMAN_JDK_VERSION}"


###################
# Mavens
###################
# We use maven wrapper https://maven.apache.org/tools/wrapper/
# Why? Because maven is installed with most runner
# Therefore it's not in the tutorial or installed
# https://github.com/actions/setup-java/issues/685


###################
# JReleaser
###################
JRELEASER_VERSION=$(yq --exit-status '.project.properties."jreleaser.version"' pom.xml)
if ! sdk home jreleaser "${JRELEASER_VERSION}" >/dev/null; then
  sdk install jreleaser "${JRELEASER_VERSION}"
fi
sdk use jreleaser "${JRELEASER_VERSION}"

###################
# Contrib Dev Script
###################
export PATH=$PWD/contrib/script:$PATH

###################
# Local Install
###################
export PATH=/opt/$PROJECT_NAME/bin:$PATH

###################
# Git
###################
echo ""
echo "Git configuration applied:"
# Git Hooks
# Add the git_hooks directory (modify the .git/config file)
git config core.hooksPath ./.git-hooks
echo "   HooksPath: .git-hooks"

# Git User Email
# Env name should be uppercase without minus
ENV_ORGANISATION_NAME=$(echo "$PROJECT_ORGANISATION_NAME" | tr '[:lower:]' '[:upper:]' | tr '-' '_' )
EMAIL_VAR="${ENV_ORGANISATION_NAME}_GIT_EMAIL"
EMAIL_VALUE="${!EMAIL_VAR}"
check_env_var "$EMAIL_VAR" "$EMAIL_VALUE" || return 1
git config user.email "$EMAIL_VALUE"
echo "   Email: $EMAIL_VALUE"

# Git signing key is the long format dir
# gpg --list-secret-keys --keyid-format=long
SIGNING_KEY_VAR="${ENV_ORGANISATION_NAME}_GIT_SIGNING_KEY"
SIGNING_KEY_VALUE="${!SIGNING_KEY_VAR}"
check_env_var "$SIGNING_KEY_VAR" "$SIGNING_KEY_VALUE" || return 1
git config user.signingkey "$SIGNING_KEY_VALUE"
echo "   GPG Key: $SIGNING_KEY_VALUE"

git config commit.gpgsign true
echo "   GPG Sign: true"

# Last EOL before direnv output
echo ""

