#!/usr/bin/env bash

set -TCEeuo pipefail

if [ -z "$PROJECT_NAME" ]; then
    echo "ERROR: PROJECT_NAME environment variable is not set"
    exit 1
fi

if [ -z "$PROJECT_ORGANISATION_NAME" ]; then
    echo "ERROR: PROJECT_ORGANISATION_NAME environment variable is not set"
    exit 1
fi

if [ -z "$PROJECT_ROOT" ]; then
    echo "ERROR: PROJECT_ROOT environment variable is not set"
    exit 1
fi

export JRELEASER_PROJECT_VERSION
JRELEASER_PROJECT_VERSION=$(yq --exit-status '.project.version' "$PROJECT_ROOT/pom.xml")
VERSION="$JRELEASER_PROJECT_VERSION" # without snapshot
TAG_VERSION=v$VERSION


echo "##############################"
echo "# Maven Clean and Test"
echo "##############################"
if ! mvn clean test; then
  echo "Error where seen during the tests execution. Exiting"
  exit 1
fi

echo "##############################"
echo "# Version Up"
echo "##############################"
mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$VERSION"
if [[ -n $(git status -s) ]]; then
  echo "Git is dirty"
  git commit -am "feat(release): release version $VERSION"
else
  echo "Git is not dirty"
fi

echo "##############################"
echo "# Git Tag"
echo "##############################"
git tag -a "$TAG_VERSION" -f -m "$PROJECT_NAME $TAG_VERSION"

echo "##############################"
echo "# Maven Package"
echo "##############################"
# This command will:
# * Create the Jar,
# * Download the jdk,
# * Move the dependencies
if ! mvn -Dmaven.test.skip=true package -P release; then
  echo "Error while packaging"
  exit 1
fi


# Print the jar manifest
JAR=target/${PROJECT_ORGANISATION_NAME}-${PROJECT_NAME}-${VERSION}.jar
unzip -p "$JAR" META-INF/MANIFEST.MF

# assemble create the distributions
# it's not a dependency of the release command
jreleaser assemble

